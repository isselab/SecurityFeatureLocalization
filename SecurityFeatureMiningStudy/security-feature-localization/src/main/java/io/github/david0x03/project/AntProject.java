package io.github.david0x03.project;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Collections;
import java.util.List;


/**
 * Represents a Gradle-based Java project, providing methods to identify the Gradle
 * configuration, extract Java source version, build the project, and manage dependencies.
 */
public class AntProject extends JavaProject {

    /**
     * Initializes a Ant project instance.
     *
     * @param projectPath The path to the project directory.
     */
    public AntProject(Path projectPath) {
        super(projectPath);
        this.getSources().add(new JavaSource(this, projectPath));
    }

    /**
     * Verifies whether the specified path contains a valid Gradle project.
     *
     * @param projectPath The path to the project directory.
     * @return True if the project is a Ant project, otherwise false.
     */
    public static boolean isValidProject(Path projectPath) {
        return Files.exists(projectPath.resolve("build.xml"));
    }

    /**
     * Retrieves the Java source version used by the project by executing Gradle commands.
     *
     * @return The Java source version as a string, or null if it cannot be determined.
     */
    @Override
    public String getJavaSourceVersion() {
        return javaSourceVersion;
    }

    /**
     * Mocks building the project by executing Ant commands.
     *
     * @return True if the build is successful, otherwise false.
     */
    @Override
    public boolean buildProject() {
        return true;
    }

    /**
     * Retrieves the external dependencies of the project.
     *
     * @param source The Java source file whose dependencies are to be retrieved.
     * @return A list of paths to dependency files.
     */
    @Override
    protected List<Path> getDependencies(JavaSource source) {
       return Collections.emptyList();
    }

    /**
     * Retrieves the files generated by Ant during the build process.
     *
     * @param source The Java source file to check for generated files.
     * @return A list of paths to generated files.
     */
    @Override
    protected List<String> getGeneratedFiles(JavaSource source) {
       return Collections.emptyList();
    }
}